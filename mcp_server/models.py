# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:53:41+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, RootModel


class Type(Enum):
    AlternateFeedType = 'AlternateFeedType'
    Genre = 'Genre'
    Industry = 'Industry'
    Language = 'Language'
    MediaRating = 'MediaRating'


class Attributes(BaseModel):
    created_at: Optional[datetime] = None
    display_name: Optional[str] = Field(
        None, description='Human readable representation of the classification'
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='An object with more detailed information about the classification.\nThe possible members are different per type of classification.\n',
    )
    parent_id: Optional[UUID] = Field(
        None,
        description='This will be replaced by the relationship `parent` in a future update.<br/>\nFor hierarchical classifications, this is the ID of the parent classification\n',
    )
    tree_path: Optional[List[UUID]] = Field(
        None,
        description='For hierarchical classifications this is the list of IDs reflecting the hierarchy starting\nwith the root level node.\n',
        examples=[
            [
                'cf6cfcd6-6221-4b63-b068-14d885193a8e',
                '6172c736-8d9e-4d40-8c43-8bf7070c0c94',
            ]
        ],
    )
    type: Optional[Type] = Field(
        None,
        description='The type of classification. The type of retrievable classifications depends on the privileges\nof the credential being used.\n',
        examples=['Genre'],
    )
    updated_at: Optional[datetime] = None
    value: Optional[str] = Field(
        None,
        description='The value the classification represents. The meaning of this attribute depends on the type of classification.\n',
    )
    value_path: Optional[str] = Field(
        None,
        description='For hierarchical classifications this is a concatenated string of all the classification\nvalues from the root to this classification using a `: ` as separator.\n',
        examples=['Comedy: Standup'],
    )


class Classification(BaseModel):
    attributes: Optional[Attributes] = None
    id: Optional[UUID] = Field(None, examples=['c1fbb1bf-45b1-4803-986e-123166f7f427'])
    type: Optional[str] = Field(
        None,
        description='The type of resource. This is always `classifications`',
        examples=['classifications'],
    )


class ClassificationType(Enum):
    AlternateFeedType = 'AlternateFeedType'
    Genre = 'Genre'
    Industry = 'Industry'
    Language = 'Language'
    MediaRating = 'MediaRating'


class ClassifiedType(Enum):
    Series = 'Series'
    Season = 'Season'
    Episode = 'Episode'


class Attributes1(BaseModel):
    classification_id: Optional[UUID] = Field(
        None,
        description='This will be replaced by the relationship `classification` in a future update.<br/>\nThe ID of the classification linked to the entity\n',
        examples=['497aad13-1c96-41d8-80e2-9a5aa7bc96fa'],
    )
    classification_type: Optional[ClassificationType] = Field(
        None,
        description='This will be replaced by the relationship `classification` in a future update.<br/>',
    )
    classified_id: Optional[UUID] = Field(
        None,
        description='This will be replaced by the relationship `classified` in a future update.<br/>\nThe ID of the entity linked to the classification\n',
        examples=['8e9dc5d8-8a16-424e-ba96-6a7261a9a23b'],
    )
    classified_type: Optional[ClassifiedType] = Field(
        None,
        description='This will be replaced by the relationship `classified` in a future update.<br/>',
    )
    created_at: Optional[datetime] = None
    position: Optional[int] = Field(
        None,
        description='The position or order of the linked classification within the classified resource',
    )
    primary: Optional[bool] = Field(
        None,
        description='When `true` it describes the best classification of a specific type for a given\nclassified item\n',
    )
    updated_at: Optional[datetime] = None


class Type1(Enum):
    AnchorCredit = 'AnchorCredit'
    AssociateProducerCredit = 'AssociateProducerCredit'
    AuthorCredit = 'AuthorCredit'
    CastCredit = 'CastCredit'
    CoHostCredit = 'CoHostCredit'
    ComposerCredit = 'ComposerCredit'
    CreatorCredit = 'CreatorCredit'
    Credit = 'Credit'
    DirectorCredit = 'DirectorCredit'
    EditorCredit = 'EditorCredit'
    EngineerCredit = 'EngineerCredit'
    ExecutiveProducerCredit = 'ExecutiveProducerCredit'
    GuestCoHostCredit = 'GuestCoHostCredit'
    GuestCredit = 'GuestCredit'
    GuestHostCredit = 'GuestHostCredit'
    HeadWriterCredit = 'HeadWriterCredit'
    HostCredit = 'HostCredit'
    ProducerCredit = 'ProducerCredit'
    ReporterCredit = 'ReporterCredit'
    SeniorProducerCredit = 'SeniorProducerCredit'
    SidekickCredit = 'SidekickCredit'
    VideoProducerCredit = 'VideoProducerCredit'
    WriterCredit = 'WriterCredit'


class Attributes2(BaseModel):
    created_at: Optional[datetime] = None
    position: Optional[int] = Field(
        None,
        description='The order of this credit within all credits of the referenced creditable entity',
    )
    type: Optional[Type1] = Field(
        None,
        description='The type of credit the linked person has on the referenced entity',
    )
    updated_at: Optional[datetime] = None


class ItunesType(Enum):
    full = 'full'
    bonus = 'bonus'
    trailer = 'trailer'


class PremiumStatus(Enum):
    active = 'active'
    inactive = 'inactive'
    force_active = 'force-active'
    force_inactive = 'force-inactive'


class Status(Enum):
    active = 'active'
    inactive = 'inactive'


class Attributes3(BaseModel):
    allow_user_comments: Optional[bool] = Field(
        None,
        description='Only visible to credentials having write privileges for the series.\n',
    )
    cascaded_cover_image_id: Optional[UUID] = Field(
        None,
        description='This will be replaced by the relationship `cascaded_cover_image` in a future update.<br/>\nThe image ID of the cover art for this episode. This is the preferred image ID to use.\nIf there is no specific cover for the episode, the image ID of the season or the\nseries will be returned, whichever has one defined.\nThe `/images` endpoint provides details to the image.\n',
        examples=['ec8f13bf-77c0-40fe-933a-8c088c16bc17'],
    )
    cover_image_id: Optional[UUID] = Field(
        None,
        description='This will be replaced by the relationship `cover_image` in a future update.<br/>\nThe image ID of the cover art for this episode, if an episode-specific image has been provided.\nThe `/images` endpoint provideds details to the image.\n',
        examples=['ec8f13bf-77c0-40fe-933a-8c088c16bc17'],
    )
    created_at: Optional[datetime] = None
    description: Optional[str] = Field(
        None,
        description='The description of the episode, possibly in HTML format',
        examples=['<p><strong>Some</strong> funny example.</p>'],
    )
    description_is_html: Optional[bool] = Field(
        None, description='Determines whether `description` is in HTML format or plain.'
    )
    description_plain: Optional[str] = Field(
        None,
        description='The description with all HTML markup removed. If the description does not contain markup,\nthis is identical to `description`.\n',
        examples=['Some funny example.'],
    )
    file_name: Optional[str] = Field(
        None,
        description='The file name, without extension, to present users when downloading the episode',
    )
    itunes_type: Optional[ItunesType] = Field(
        None,
        description="The type of the episode according to Apple's type categorization",
    )
    listen_count: Optional[int] = Field(
        None,
        description='The number of total downloads all time for this episode.\nOnly visible if the credential has the right privilege on the series.\n',
    )
    premium_status: Optional[PremiumStatus] = Field(
        None, description='The current premium status of the episode'
    )
    published: Optional[bool] = Field(
        None,
        description='If `true`, the episode will be available for download and included in the feed as soon as its\nrelease time is reached, provided it has a valid media file, and `release_end_at` is in the future (if applicable).\n',
    )
    release_end_at: Optional[datetime] = Field(
        None,
        description='The date and time when an episode will no longer be included in the feed, or available for download.\n`Published` will remain `true` unless the episode is manually unpublished.\n',
    )
    release_immediately: Optional[bool] = Field(
        None,
        description="If `true`, the episode's release time is set in a way it is considered released right away.\nOnly visible if the credential has write privileges on the series.\n",
    )
    released_at: Optional[datetime] = Field(
        None,
        description='The date and time when an episode will be released. It will be available for download and included\nin the feed if this time is reached, `published` is set to `true`, and the episode has a media file.\n',
    )
    rss_guid: Optional[str] = Field(
        None,
        description='A globally unique identifier describing the episode. This ID is commonly used by podcast applications\nto determine whether an episode has already been downloaded or not.\n',
    )
    season_id: Optional[UUID] = Field(
        None,
        description='Use the relationship `season` instead.<br />\nThe ID of the season an episode belongs to. This can be `null`. A series can have episodes with and\nwithout seasons at the same time.\n',
        examples=['eba5523d-e73a-43ec-bfd9-140ce9db76ac'],
    )
    series_id: Optional[UUID] = Field(
        None,
        description='Use the relationship `series` instead.<br />\nThe ID of the series an episode belongs to.\n',
        examples=['9897f8cb-ffa7-4674-9529-c6037826c738'],
    )
    sort_title: Optional[str] = Field(
        None,
        description='The title of the episode modified for sorting. This converts all characters to\nlower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.\n',
        examples=['big hit'],
    )
    status: Optional[Status] = Field(None, description='The status of an episode')
    title: Optional[str] = Field(
        None, description='The title of the episode', examples=['The Big Hit']
    )
    updated_at: Optional[datetime] = None


class BucketType(Enum):
    AdRepAccount = 'AdRepAccount'
    Agency = 'Agency'
    Network = 'Network'
    Series = 'Series'
    User = 'User'


class CropData(BaseModel):
    height: Optional[float] = Field(
        None, description='The height of the crop area', examples=[3000]
    )
    left: Optional[float] = Field(
        None, description='The left coordinate of the crop area', examples=[100]
    )
    top: Optional[float] = Field(
        None, description='The top coordinate of the crop area', examples=[150]
    )
    width: Optional[float] = Field(
        None, description='The width of the crop area', examples=[3000]
    )


class Status1(Enum):
    invalid = 'invalid'
    processing = 'processing'
    uploaded = 'uploaded'
    valid = 'valid'


class Attributes4(BaseModel):
    bucket_id: Optional[UUID] = Field(
        None,
        description='This will be replaced by the relationship `bucket` in a future update.<br/>\nThe ID of the owning entity\n',
        examples=['687282a1-faf7-4d37-8f4a-cbddedf6db8f'],
    )
    bucket_type: Optional[BucketType] = Field(
        None,
        description='This will be replaced by the relationship `bucket` in a future update.<br/>\nThe type of the owning entity\n',
    )
    created_at: Optional[datetime] = None
    crop_data: Optional[CropData] = Field(
        None, title='The crop area within the original media asset'
    )
    status: Optional[Status1] = Field(
        None,
        description='The current value of the image state machine. It starts with `uploaded` and\ntransitions to `processing` once a worker has picked it up. If all variations and\nstyles of an image have been successfully created, the status becomes `valid`. In\ncase of a problem during the processing it changes to `invalid`.\n',
    )
    updated_at: Optional[datetime] = None


class Links(BaseModel):
    first: Optional[str] = Field(
        None,
        description='A URL to retrieve the first page of data keeping the provided page size',
    )
    last: Optional[str] = Field(
        None,
        description='A URL to retrieve the last page of data keeping the provided page size',
    )
    next: Optional[str] = Field(
        None,
        description='A URL to retrieve the next page of data keeping the provided page size',
    )
    prev: Optional[str] = Field(
        None,
        description='A URL to retrieve the previous page of keeping using the provided page size',
    )
    self: Optional[str] = Field(
        None, description='A URL to retrieve the collection as the primary data'
    )


class AttachmentType(Enum):
    Image = 'Image'
    Segment = 'Segment'
    SegmentList = 'SegmentList'


class Style(Enum):
    info = 'info'
    itunes = 'itunes'
    medium = 'medium'
    original = 'original'
    regular = 'regular'
    square_400 = 'square-400'
    square_640 = 'square-640'
    square_888 = 'square-888'
    square_3000 = 'square-3000'
    stripped_original = 'stripped-original'
    thumb = 'thumb'
    waveform_data = 'waveform_data'


class Attributes5(BaseModel):
    attachment_id: Optional[UUID] = Field(
        None,
        description='This will be replaced by the relationship `attachment` in a future update.<br/>\nThe ID of the entity this media asset is attached to\n',
        examples=['09a93847-d5bf-47b4-90d6-854e95011951'],
    )
    attachment_type: Optional[AttachmentType] = Field(
        None,
        description='This will be replaced by the relationship `attachment` in a future update.<br/>\nThe type of the entity this media asset is attached to\n',
    )
    cdn_url: Optional[str] = Field(
        None, description='The CDN-URL where the media asset is available'
    )
    content_type: Optional[str] = Field(
        None, description='The MIME type of the media asset', examples=['image/jpeg']
    )
    created_at: Optional[datetime] = None
    file_name: Optional[str] = Field(
        None,
        description='The filename of the media asset without any path components.\n',
    )
    file_size: Optional[int] = Field(
        None, description='The size in bytes of the media asset', examples=[2544307]
    )
    size_height: Optional[int] = Field(
        None,
        description='The height in pixels of the media asset, if the media asset is an image',
        examples=[1839],
    )
    size_width: Optional[int] = Field(
        None,
        description='The width in pixels of the media asset, if the media asset is an image',
        examples=[1839],
    )
    style: Optional[Style] = Field(
        None,
        description='The style of the media asset. A media asset is part of a collection of related media files,\nfor example an image or an episode (audio). Images usually have differently sized versions,\nand episodes can have different audio formats.\n',
        examples=['regular'],
    )
    updated_at: Optional[datetime] = None


class MediaAsset(BaseModel):
    attributes: Optional[Attributes5] = None
    id: Optional[UUID] = Field(None, examples=['c1fbb1bf-45b1-4803-986e-123166f7f427'])
    type: Optional[str] = Field(
        None,
        description='The type of resource. This is always `media_assets`',
        examples=['media_assets'],
    )


class Attributes6(BaseModel):
    copyright: Optional[str] = Field(None, description='The copyright of the network')
    created_at: Optional[datetime] = None
    description: Optional[str] = Field(
        None,
        description='The description of the network eventually in HTML format',
        examples=['<p><strong>Some</strong> funny example.</p>'],
    )
    description_is_html: Optional[bool] = Field(
        None, description='Determines whether `description` is in HTML format or plain.'
    )
    description_plain: Optional[str] = Field(
        None,
        description='The description with all HTML markup removed. If the description does not contain markup\nthis is identitcal to `description`.\n',
        examples=['Some funny example.'],
    )
    facebook_url: Optional[str] = Field(
        None, description='Where to find this network on Facebook'
    )
    instagram_url: Optional[str] = Field(
        None, description='Where to find this network on Instagram'
    )
    linkedin_url: Optional[str] = Field(
        None, description='Where to find the network on LinkedIn'
    )
    name: Optional[str] = Field(None, description='The name of the network')
    public_email: Optional[str] = Field(
        None, description='A public point of contact through email'
    )
    public_page_enabled: Optional[bool] = Field(
        None,
        description="If this is `true`, a public web page for this network is available under\n`https://art19.com/networks/{slug}`, where `slug` is the value of the corresponding attribute.\nThis public page provides details about the network as well as descriptive links to all its\nseries' public pages. If this is `false`, no such public page is available.\n",
    )
    slug: Optional[str] = Field(
        None,
        description='The unique slug for the network also used on its public page for example.\nThis value is unique system-wide amongst all networks _and_ series.\n',
    )
    tumblr_url: Optional[str] = Field(
        None, description='Where to find the network on Tumblr'
    )
    twitter_url: Optional[str] = Field(
        None, description='Where to find the network on Twitter'
    )
    updated_at: Optional[datetime] = None
    website_url: Optional[str] = Field(
        None, description='A public website for the network'
    )


class Attributes7(BaseModel):
    avatar_id: Optional[UUID] = Field(
        None,
        description='This will be replaced by the relationship `avatar` in a future update.<br/>\nThe image ID of an avatar or head shot of the person. Details can be\nretrieved using the `/images` endpoint.\n',
        examples=['686ae786-6bbe-42f4-9a51-9e1cf207fc8b'],
    )
    biography: Optional[str] = Field(
        None, description='The biography of the person without markup.'
    )
    born: Optional[date] = Field(None, description='The birthday of the person')
    created_at: Optional[datetime] = None
    died: Optional[date] = Field(None, description='The day of death of the person')
    first_name: Optional[str] = Field(None, description='The first name of the person')
    from_country: Optional[str] = Field(
        None, description='The country the person is from'
    )
    from_locality: Optional[str] = Field(
        None, description='The locality or city the person is from'
    )
    from_region: Optional[str] = Field(
        None, description='The region/state/province the person is from'
    )
    last_name: Optional[str] = Field(None, description='The last name of the person')
    public_email: Optional[str] = Field(
        None, description='The public email contact for the person'
    )
    updated_at: Optional[datetime] = None


class ResourceIdentifier(BaseModel):
    id: Optional[UUID] = Field(
        None,
        description='The ID of the resource',
        examples=['2d7e9be5-0b5a-43d3-9b75-04ec0c0edae8'],
    )
    type: Optional[str] = Field(None, description='The type of the resource')


class ResourceLink(BaseModel):
    self: Optional[str] = Field(
        None, description='A URL to retrieve the resource as the primary data'
    )


class Status2(Enum):
    active = 'active'
    inactive = 'inactive'


class Attributes8(BaseModel):
    cascaded_cover_image_id: Optional[UUID] = Field(
        None,
        description="This will be replaced by the relationship `cascaded_cover_image` in a future update.<br/>\nThe image ID of the cover art for this season. If there is no specific cover for the season,\nthe image ID of the series' cover art will be returned.\nThe `/images` endpoint provideds details to the image.\n",
        examples=['ec8f13bf-77c0-40fe-933a-8c088c16bc17'],
    )
    cover_image_id: Optional[UUID] = Field(
        None,
        description='This will be replaced by the relationship `cover_image` in a future update.<br/>\nThe image ID of the cover art for this season. The `/images` endpoint provideds details to the image.\n',
        examples=['ec8f13bf-77c0-40fe-933a-8c088c16bc17'],
    )
    created_at: Optional[datetime] = None
    description: Optional[str] = Field(
        None,
        description='The description of the season eventually in HTML format',
        examples=['<p><strong>Some</strong> funny example.</p>'],
    )
    description_is_html: Optional[bool] = Field(
        None, description='Determines whether `description` is in HTML format or plain.'
    )
    description_plain: Optional[str] = Field(
        None,
        description='The description with all HTML markup removed. If the description does not contain markup\nthis is identitcal to `description`.\n',
        examples=['Some funny example.'],
    )
    first_released_episode_id: Optional[UUID] = Field(
        None,
        description='This will be replaced by the relationship `first_released_episode` in a future update.<br/>\nThe ID of the first released episode within the season\n',
        examples=['73a97f1a-5c3c-4226-8ab3-1d7f9e486e4d'],
    )
    last_released_episode_id: Optional[UUID] = Field(
        None,
        description='This will be replaced by the relationship `last_released_episode` in a future update.<br/>\nThe ID of the most recently released episode within the season\n',
        examples=['a50b7a22-2128-46d7-b3df-2b308df21bf0'],
    )
    season_number: Optional[int] = Field(
        None,
        description='The number of the season. This could be `null` as well.',
        examples=[1],
    )
    sort_title: Optional[str] = Field(
        None,
        description='The title of the season modified for sorting. This converts all characters to\nlower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.\n',
        examples=['awesome season'],
    )
    status: Optional[Status2] = Field(
        None, description='The current status of the season'
    )
    title: Optional[str] = Field(
        None, description='The title of the season', examples=['The Aweseom Season']
    )
    updated_at: Optional[datetime] = None


class CascadedCoverImage(BaseModel):
    data: Optional[ResourceIdentifier] = None


class ClassificationInclusions(BaseModel):
    data: Optional[List[ResourceIdentifier]] = None


class CoverImage(BaseModel):
    data: Optional[ResourceIdentifier] = None


class Credits(BaseModel):
    data: Optional[List[ResourceIdentifier]] = None


class Episodes(BaseModel):
    data: Optional[List[ResourceIdentifier]] = None


class FirstReleasedEpisode(BaseModel):
    data: Optional[ResourceIdentifier] = None


class Images(BaseModel):
    data: Optional[List[ResourceIdentifier]] = None


class LastReleasedEpisode(BaseModel):
    data: Optional[ResourceIdentifier] = None


class Series2(BaseModel):
    data: Optional[ResourceIdentifier] = None


class Taggings(BaseModel):
    data: Optional[List[ResourceIdentifier]] = None


class Tags(BaseModel):
    data: Optional[List[ResourceIdentifier]] = None


class Relationships6(BaseModel):
    cascaded_cover_image: Optional[CascadedCoverImage] = Field(
        None,
        description="The cover art for this season. If there is no specific cover for the season,\nthe cover image of the series' cover art will be returned.\nThe `/images` endpoint provideds details to the image.\n",
    )
    classification_inclusions: Optional[ClassificationInclusions] = Field(
        None, title='A list of classifications associated with the season'
    )
    cover_image: Optional[CoverImage] = Field(
        None, description='The cover image for the season'
    )
    credits: Optional[Credits] = Field(
        None, title='A list of credits given to people in the season'
    )
    episodes: Optional[Episodes] = Field(
        None,
        title='A list of published and released episodes with an actual media file within the season',
    )
    first_released_episode: Optional[FirstReleasedEpisode] = Field(
        None, description='The first released episode within the season'
    )
    images: Optional[Images] = Field(
        None, title='Both the cover image and the cascaded cover image for the season'
    )
    last_released_episode: Optional[LastReleasedEpisode] = Field(
        None, description='The most recently released episode within the season'
    )
    series: Optional[Series2] = Field(None, title='The series the season belongs to')
    taggings: Optional[Taggings] = Field(
        None, title='A list of associations linking tags to the season.'
    )
    tags: Optional[Tags] = Field(
        None, title='A list of tags associated with the season'
    )


class Season1(BaseModel):
    attributes: Optional[Attributes8] = None
    id: Optional[UUID] = Field(None, examples=['c1fbb1bf-45b1-4803-986e-123166f7f427'])
    relationships: Optional[Relationships6] = None
    type: Optional[str] = Field(
        None,
        description='The type of resource. This is always `seasons`',
        examples=['seasons'],
    )


class Type2(Enum):
    Series = 'Series'


class Attributes9(BaseModel):
    amazon_subscription_url: Optional[str] = Field(
        None, description='The Amazon Music subscription URL'
    )
    castbox_subscription_url: Optional[str] = Field(
        None, description='The CastBox subscription URL'
    )
    cover_image_id: Optional[UUID] = Field(
        None,
        description='This will be replaced by the relationship `cover_image` in a future update.<br/>\nThe image ID of the cover art for this series. The `/images` endpoint provideds details to the image.\n',
        examples=['ec8f13bf-77c0-40fe-933a-8c088c16bc17'],
    )
    created_at: Optional[datetime] = None
    description: Optional[str] = Field(
        None,
        description='The description of the series eventually in HTML format',
        examples=['<p><strong>Some</strong> funny example.</p>'],
    )
    description_is_html: Optional[bool] = Field(
        None, description='Determines whether `description` is in HTML format or plain.'
    )
    description_plain: Optional[str] = Field(
        None,
        description='The description with all HTML markup removed. If the description does not contain markup\nthis is identitcal to `description`.\n',
        examples=['Some funny example.'],
    )
    facebook_url: Optional[str] = Field(
        None, description='The URL of the series on Facebook'
    )
    google_subscription_url: Optional[str] = Field(
        None, description='The Google subscription URL'
    )
    iheart_subscription_url: Optional[str] = Field(
        None, description='The iHeartRadio subscription URL'
    )
    instagram_url: Optional[str] = Field(
        None, description='The URL of the series on Instagram'
    )
    itunes_subscription_badge_enabled: Optional[bool] = Field(
        None,
        description='If `null` or `true`, the ART19 web player will render an iTunes subscription badge',
    )
    itunes_subscription_url: Optional[str] = Field(
        None, description='The Apple iTunes subscription URL'
    )
    linkedin_url: Optional[str] = Field(
        None, description='The URL of the series on LinkedIn'
    )
    pocket_casts_subscription_url: Optional[str] = Field(
        None, description='The Pocket Casts subscription URL'
    )
    podcast_subscription_url: Optional[str] = Field(
        None,
        description='The URL of the RSS feed',
        examples=['https://rss.art19.com/greatest-show-ever'],
    )
    public_page_enabled: Optional[bool] = Field(
        None,
        description='If this is `true`, a public web page for this series is available under\n`https://art19.com/shows/{slug}`, where `slug` is the value of the corresponding attribute.\nThis public page provides details about the series as well as descriptive links to all its\nepisodes. If this is `false`, no such public page is available.\n',
    )
    public_title: Optional[str] = Field(
        None,
        description='If present, this is the preferred title for the series in the RSS Feed',
    )
    radio_public_subscription_url: Optional[str] = Field(
        None, description='The RadioPublic subscription URL'
    )
    rss_author: Optional[str] = Field(
        None, description='The author responsible for the RSS feed'
    )
    rss_copyright: Optional[str] = Field(
        None,
        description='The copyright disclaimer for the contents of the show, appearing after a © symbol, e.g. `2020 ART19, Inc.`',
    )
    rss_email: Optional[str] = Field(
        None, description='The pubic point of contact for the show'
    )
    rss_owner: Optional[str] = Field(
        None, description='The name of the contact for the show'
    )
    slug: Optional[str] = Field(
        None,
        description="This slug is unique over all series and networks system wide and is used to access the series' feed\nas well as its eventually enabled public page on ART19.\n",
        examples=['greatest-show-ever'],
    )
    sort_title: Optional[str] = Field(
        None,
        description='The title of the series modified for sorting. This converts all characters to\nlower case, removes an eventually leading `The` as well as leading and trailling whitespace characters.\n',
        examples=['greatest show ever'],
    )
    spotify_subscription_badge_enabled: Optional[bool] = Field(
        None,
        description='If `null` or `true`, the ART19 web player will render a Spotify subscription badge',
    )
    spotify_subscription_url: Optional[str] = Field(
        None, description='The Spotify subscription URL'
    )
    status: Optional[Status2] = Field(None, description='The status of the series')
    stitcher_subscription_badge_enabled: Optional[bool] = Field(
        None,
        description='If `null` or `true`, the ART19 web player will render a Stitcher subscription badge',
    )
    stitcher_subscription_url: Optional[str] = Field(
        None, description='The Stitcher subscription URL'
    )
    title: Optional[str] = Field(
        None, description='The title of the series', examples=['The greatest show ever']
    )
    tumblr_url: Optional[str] = Field(
        None, description='The URL of the series on Tumblr'
    )
    tune_in_subscription_url: Optional[str] = Field(
        None, description='The TuneIn subscription URL'
    )
    twitter_url: Optional[str] = Field(
        None, description='The URL of the series on Twitter'
    )
    type: Optional[Type2] = Field(None, description='The type of the series')
    updated_at: Optional[datetime] = None
    website_url: Optional[str] = Field(
        None, description='The custom website URL for the series'
    )


class Network1(BaseModel):
    data: Optional[ResourceIdentifier] = None


class Seasons(BaseModel):
    data: Optional[List[ResourceIdentifier]] = None


class Relationships7(BaseModel):
    classification_inclusions: Optional[ClassificationInclusions] = Field(
        None, title='A list of classifications associated with the series'
    )
    cover_image: Optional[CoverImage] = Field(
        None, description='The cover image for the series'
    )
    credits: Optional[Credits] = Field(
        None, title='A list of credits given to people in the series'
    )
    episodes: Optional[Episodes] = Field(
        None,
        title='A list of published and released episodes with an actual media file',
    )
    images: Optional[Images] = Field(None, title='The cover image for the series')
    network: Optional[Network1] = Field(None, title='The network the series belongs to')
    seasons: Optional[Seasons] = Field(None, title='A list of seasons in the series')
    taggings: Optional[Taggings] = Field(
        None, title='A list of associations linking tags to the series'
    )
    tags: Optional[Tags] = Field(
        None, title='A list of tags associated with the series'
    )


class Series3(BaseModel):
    attributes: Optional[Attributes9] = None
    id: Optional[UUID] = Field(None, examples=['c1fbb1bf-45b1-4803-986e-123166f7f427'])
    relationships: Optional[Relationships7] = None
    type: Optional[str] = Field(
        None,
        description='The type of resource. This is always `series`',
        examples=['series'],
    )


class SortEnum(Enum):
    classification_value = 'classification_value'
    created_at = 'created_at'
    position = 'position'


class Source(BaseModel):
    parameter: Optional[str] = Field(
        None,
        description='A string indicating which URI query parameter caused the error.',
        examples=['series_id'],
    )
    pointer: Optional[str] = Field(
        None,
        description='A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute).\n',
        examples=['/data/attributes/name'],
    )


class Error(BaseModel):
    code: Optional[str] = Field(
        None,
        description='An application-specific error code, expressed as a string value',
    )
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n',
        examples=['Required query parameter “series_id” is missing'],
    )
    source: Optional[Source] = Field(
        None,
        description='An object containing references to the source of the error, optionally including any of the following members.\n',
    )
    status: Optional[str] = Field(
        None,
        description='The HTTP status code applicable to this problem, expressed as a string value: 400',
        examples=['400'],
    )
    title: Optional[str] = Field(
        None,
        description='A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n',
        examples=['Bad Request'],
    )


class ClassificationInclusionsGetResponse1(BaseModel):
    errors: Optional[List[Error]] = Field(
        None,
        description='An error object describing the problem. Please check out the\n[JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\ndescription of the returned object.\n',
    )


class Ids(RootModel[List[UUID]]):
    root: List[UUID]


class Sort(RootModel[List[SortEnum]]):
    root: List[SortEnum]


class Type3(Enum):
    AlternateFeedType = 'AlternateFeedType'
    Genre = 'Genre'
    Industry = 'Industry'
    Language = 'Language'
    MediaRating = 'MediaRating'


class SortEnum2(Enum):
    created_at = 'created_at'
    updated_at = 'updated_at'
    value = 'value'


class ClassificationsGetResponse(BaseModel):
    data: Optional[List[Classification]] = None
    links: Optional[Links] = None


class Error1(BaseModel):
    code: Optional[str] = Field(
        None,
        description='An application-specific error code, expressed as a string value',
    )
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n',
        examples=['Required query parameter “series_id” is missing'],
    )
    source: Optional[Source] = Field(
        None,
        description='An object containing references to the source of the error, optionally including any of the following members.\n',
    )
    status: Optional[str] = Field(
        None,
        description='The HTTP status code applicable to this problem, expressed as a string value: 400',
        examples=['400'],
    )
    title: Optional[str] = Field(
        None,
        description='A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n',
        examples=['Bad Request'],
    )


class ClassificationsGetResponse1(BaseModel):
    errors: Optional[List[Error1]] = Field(
        None,
        description='An error object describing the problem. Please check out the\n[JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\ndescription of the returned object.\n',
    )


class Sort1(RootModel[List[SortEnum2]]):
    root: List[SortEnum2]


class ClassificationsIdGetResponse(BaseModel):
    data: Optional[Classification] = None
    links: Optional[ResourceLink] = None


class CreditableType(Enum):
    Series = 'Series'
    Season = 'Season'
    Episode = 'Episode'


class SortEnum4(Enum):
    created_at = 'created_at'
    position = 'position'
    updated_at = 'updated_at'


class Error2(BaseModel):
    code: Optional[str] = Field(
        None,
        description='An application-specific error code, expressed as a string value',
    )
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n',
        examples=['Required query parameter “series_id” is missing'],
    )
    source: Optional[Source] = Field(
        None,
        description='An object containing references to the source of the error, optionally including any of the following members.\n',
    )
    status: Optional[str] = Field(
        None,
        description='The HTTP status code applicable to this problem, expressed as a string value: 400',
        examples=['400'],
    )
    title: Optional[str] = Field(
        None,
        description='A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n',
        examples=['Bad Request'],
    )


class CreditsGetResponse1(BaseModel):
    errors: Optional[List[Error2]] = Field(
        None,
        description='An error object describing the problem. Please check out the\n[JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\ndescription of the returned object.\n',
    )


class Sort2(RootModel[List[SortEnum4]]):
    root: List[SortEnum4]


class SortEnum6(Enum):
    created_at = 'created_at'
    earliest_released_at = 'earliest_released_at'
    released_at = 'released_at'
    released_or_created_at = 'released_or_created_at'
    sort_title = 'sort_title'
    title = 'title'
    updated_at = 'updated_at'


class Error3(BaseModel):
    code: Optional[str] = Field(
        None,
        description='An application-specific error code, expressed as a string value',
    )
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n',
        examples=['Required query parameter “series_id” is missing'],
    )
    source: Optional[Source] = Field(
        None,
        description='An object containing references to the source of the error, optionally including any of the following members.\n',
    )
    status: Optional[str] = Field(
        None,
        description='The HTTP status code applicable to this problem, expressed as a string value: 400',
        examples=['400'],
    )
    title: Optional[str] = Field(
        None,
        description='A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n',
        examples=['Bad Request'],
    )


class EpisodesGetResponse1(BaseModel):
    errors: Optional[List[Error3]] = Field(
        None,
        description='An error object describing the problem. Please check out the\n[JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\ndescription of the returned object.\n',
    )


class Sort3(RootModel[List[SortEnum6]]):
    root: List[SortEnum6]


class Error4(BaseModel):
    code: Optional[str] = Field(
        None,
        description='An application-specific error code, expressed as a string value',
    )
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n',
        examples=['Required query parameter “series_id” is missing'],
    )
    source: Optional[Source] = Field(
        None,
        description='An object containing references to the source of the error, optionally including any of the following members.\n',
    )
    status: Optional[str] = Field(
        None,
        description='The HTTP status code applicable to this problem, expressed as a string value: 400',
        examples=['400'],
    )
    title: Optional[str] = Field(
        None,
        description='A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n',
        examples=['Bad Request'],
    )


class ImagesGetResponse1(BaseModel):
    errors: Optional[List[Error4]] = Field(
        None,
        description='An error object describing the problem. Please check out the\n[JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\ndescription of the returned object.\n',
    )


class MediaAssetsGetResponse(BaseModel):
    data: Optional[List[MediaAsset]] = None
    links: Optional[Links] = None


class Error5(BaseModel):
    code: Optional[str] = Field(
        None,
        description='An application-specific error code, expressed as a string value',
    )
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n',
        examples=['Required query parameter “series_id” is missing'],
    )
    source: Optional[Source] = Field(
        None,
        description='An object containing references to the source of the error, optionally including any of the following members.\n',
    )
    status: Optional[str] = Field(
        None,
        description='The HTTP status code applicable to this problem, expressed as a string value: 400',
        examples=['400'],
    )
    title: Optional[str] = Field(
        None,
        description='A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n',
        examples=['Bad Request'],
    )


class MediaAssetsGetResponse1(BaseModel):
    errors: Optional[List[Error5]] = Field(
        None,
        description='An error object describing the problem. Please check out the\n[JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\ndescription of the returned object.\n',
    )


class MediaAssetsIdGetResponse(BaseModel):
    data: Optional[MediaAsset] = None
    links: Optional[ResourceLink] = None


class AdDealStatu(Enum):
    active = 'active'
    inactive = 'inactive'
    pending_active = 'pending_active'
    pending_inactive = 'pending_inactive'


class SortEnum8(Enum):
    created_at = 'created_at'
    name = 'name'
    updated_at = 'updated_at'


class Error6(BaseModel):
    code: Optional[str] = Field(
        None,
        description='An application-specific error code, expressed as a string value',
    )
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n',
        examples=['Required query parameter “series_id” is missing'],
    )
    source: Optional[Source] = Field(
        None,
        description='An object containing references to the source of the error, optionally including any of the following members.\n',
    )
    status: Optional[str] = Field(
        None,
        description='The HTTP status code applicable to this problem, expressed as a string value: 400',
        examples=['400'],
    )
    title: Optional[str] = Field(
        None,
        description='A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n',
        examples=['Bad Request'],
    )


class NetworksGetResponse1(BaseModel):
    errors: Optional[List[Error6]] = Field(
        None,
        description='An error object describing the problem. Please check out the\n[JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\ndescription of the returned object.\n',
    )


class AdDealStatus(RootModel[List[AdDealStatu]]):
    root: List[AdDealStatu]


class Sort4(RootModel[List[SortEnum8]]):
    root: List[SortEnum8]


class SortEnum10(Enum):
    created_at = 'created_at'
    first_name = 'first_name'
    last_name = 'last_name'
    updated_at = 'updated_at'


class Error7(BaseModel):
    code: Optional[str] = Field(
        None,
        description='An application-specific error code, expressed as a string value',
    )
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n',
        examples=['Required query parameter “series_id” is missing'],
    )
    source: Optional[Source] = Field(
        None,
        description='An object containing references to the source of the error, optionally including any of the following members.\n',
    )
    status: Optional[str] = Field(
        None,
        description='The HTTP status code applicable to this problem, expressed as a string value: 400',
        examples=['400'],
    )
    title: Optional[str] = Field(
        None,
        description='A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n',
        examples=['Bad Request'],
    )


class PeopleGetResponse1(BaseModel):
    errors: Optional[List[Error7]] = Field(
        None,
        description='An error object describing the problem. Please check out the\n[JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\ndescription of the returned object.\n',
    )


class Sort5(RootModel[List[SortEnum10]]):
    root: List[SortEnum10]


class SortEnum12(Enum):
    created_at = 'created_at'
    sort_title = 'sort_title'
    title = 'title'
    updated_at = 'updated_at'


class SeasonsGetResponse(BaseModel):
    data: Optional[List[Season1]] = None
    links: Optional[Links] = None


class Error8(BaseModel):
    code: Optional[str] = Field(
        None,
        description='An application-specific error code, expressed as a string value',
    )
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n',
        examples=['Required query parameter “series_id” is missing'],
    )
    source: Optional[Source] = Field(
        None,
        description='An object containing references to the source of the error, optionally including any of the following members.\n',
    )
    status: Optional[str] = Field(
        None,
        description='The HTTP status code applicable to this problem, expressed as a string value: 400',
        examples=['400'],
    )
    title: Optional[str] = Field(
        None,
        description='A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n',
        examples=['Bad Request'],
    )


class SeasonsGetResponse1(BaseModel):
    errors: Optional[List[Error8]] = Field(
        None,
        description='An error object describing the problem. Please check out the\n[JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\ndescription of the returned object.\n',
    )


class Sort6(RootModel[List[SortEnum12]]):
    root: List[SortEnum12]


class SeasonsIdGetResponse(BaseModel):
    data: Optional[Season1] = None
    links: Optional[ResourceLink] = None


class SortEnum14(Enum):
    created_at = 'created_at'
    episode_released_at = 'episode_released_at'
    sort_title = 'sort_title'
    title = 'title'
    updated_at = 'updated_at'


class SeriesGetResponse(BaseModel):
    data: Optional[List[Series3]] = None
    links: Optional[Links] = None


class Error9(BaseModel):
    code: Optional[str] = Field(
        None,
        description='An application-specific error code, expressed as a string value',
    )
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n',
        examples=['Required query parameter “series_id” is missing'],
    )
    source: Optional[Source] = Field(
        None,
        description='An object containing references to the source of the error, optionally including any of the following members.\n',
    )
    status: Optional[str] = Field(
        None,
        description='The HTTP status code applicable to this problem, expressed as a string value: 400',
        examples=['400'],
    )
    title: Optional[str] = Field(
        None,
        description='A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the\nproblem, except for purposes of localization.\n',
        examples=['Bad Request'],
    )


class SeriesGetResponse1(BaseModel):
    errors: Optional[List[Error9]] = Field(
        None,
        description='An error object describing the problem. Please check out the\n[JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full\ndescription of the returned object.\n',
    )


class Sort7(RootModel[List[SortEnum14]]):
    root: List[SortEnum14]


class SeriesIdGetResponse(BaseModel):
    data: Optional[Series3] = None
    links: Optional[ResourceLink] = None


class Classification1(BaseModel):
    data: Optional[ResourceIdentifier] = None


class Relationships(BaseModel):
    classification: Optional[Classification1] = None


class ClassificationInclusion(BaseModel):
    attributes: Optional[Attributes1] = None
    id: Optional[UUID] = Field(None, examples=['c1fbb1bf-45b1-4803-986e-123166f7f427'])
    relationships: Optional[Relationships] = None
    type: Optional[str] = Field(
        None,
        description='The type of resource. This is always `classification_inclusion`',
        examples=['classification_inclusion'],
    )


class Creditable(BaseModel):
    data: Optional[ResourceIdentifier] = None


class Person(BaseModel):
    data: Optional[ResourceIdentifier] = None


class Relationships1(BaseModel):
    creditable: Optional[Creditable] = None
    person: Optional[Person] = None


class Credit(BaseModel):
    attributes: Optional[Attributes2] = None
    id: Optional[UUID] = Field(None, examples=['c1fbb1bf-45b1-4803-986e-123166f7f427'])
    relationships: Optional[Relationships1] = None
    type: Optional[str] = Field(
        None,
        description='The type of resource. This is always `credits`',
        examples=['credits'],
    )


class DefaultMarkerPoints(BaseModel):
    data: Optional[List[ResourceIdentifier]] = None


class EpisodeVersions(BaseModel):
    data: Optional[List[ResourceIdentifier]] = None


class Season(BaseModel):
    data: Optional[ResourceIdentifier] = None


class SegmentLists(BaseModel):
    data: Optional[List[ResourceIdentifier]] = None


class Series(BaseModel):
    data: Optional[ResourceIdentifier] = None


class Relationships2(BaseModel):
    cascaded_cover_image: Optional[CascadedCoverImage] = Field(
        None,
        description='The cover art for this episode. This is the preferred image to use.\nIf there is no specific cover image for the episode, the cover of the season or the\nseries will be returned, whichever has one defined.\nThe `/images` endpoint provides details to the image.\n',
    )
    classification_inclusions: Optional[ClassificationInclusions] = Field(
        None, title='A list of classifications associated with the episode'
    )
    cover_image: Optional[CoverImage] = Field(
        None,
        description='The cover art for this episode, if an episode-specific image has been provided.\nThe `/images` endpoint provideds details to the image.\n',
    )
    credits: Optional[Credits] = Field(
        None, title='A list of credits given to people in the episode'
    )
    default_marker_points: Optional[DefaultMarkerPoints] = Field(
        None,
        description='Only visible if the credential has write privileges on the series',
        title='A list of default (WarpFeed) marker points',
    )
    episode_versions: Optional[EpisodeVersions] = Field(
        None,
        description='Only visible if the credential has write privileges on the series',
        title='A list of episode versions for this episode',
    )
    images: Optional[Images] = Field(
        None, title='Both the cover image and the cascaded cover image for the season'
    )
    season: Optional[Season] = Field(None, title='The season the episode belongs to')
    segment_lists: Optional[SegmentLists] = Field(
        None,
        description='Only visible if the credential has write privileges on the series',
        title='A list of segment lists directly attached to the episode',
    )
    series: Optional[Series] = Field(None, title='The series an episode belongs to')
    taggings: Optional[Taggings] = Field(
        None, title='A list of associations linking tags to the episodes.'
    )
    tags: Optional[Tags] = Field(
        None, title='A list of tags associated with the episodes'
    )


class Episode(BaseModel):
    attributes: Optional[Attributes3] = None
    id: Optional[UUID] = Field(None, examples=['c1fbb1bf-45b1-4803-986e-123166f7f427'])
    relationships: Optional[Relationships2] = None
    type: Optional[str] = Field(
        None,
        description='The type of resource. This is always `episodes`',
        examples=['episodes'],
    )


class MediaAssets(BaseModel):
    data: Optional[List[ResourceIdentifier]] = None


class Relationships3(BaseModel):
    media_assets: Optional[MediaAssets] = Field(
        None, title='All media assets available for this image'
    )


class Image(BaseModel):
    attributes: Optional[Attributes4] = None
    id: Optional[UUID] = Field(None, examples=['c1fbb1bf-45b1-4803-986e-123166f7f427'])
    relationships: Optional[Relationships3] = None
    type: Optional[str] = Field(
        None,
        description='The type of resource. This is always `images`',
        examples=['images'],
    )


class Parent(BaseModel):
    data: Optional[ResourceIdentifier] = None


class Series1(BaseModel):
    data: Optional[List[ResourceIdentifier]] = None


class Relationships4(BaseModel):
    cover_image: Optional[CoverImage] = Field(
        None, description='The cover image for the network'
    )
    images: Optional[Images] = Field(
        None,
        description='A collection of images linked to the network. This currently only includes\nthe cover image for the network.\n',
    )
    parent: Optional[Parent] = Field(
        None, description='The parent network of the network'
    )
    series: Optional[Series1] = Field(
        None,
        description='List of series within the network which are accessible to you',
    )


class Network(BaseModel):
    attributes: Optional[Attributes6] = None
    id: Optional[UUID] = Field(None, examples=['c1fbb1bf-45b1-4803-986e-123166f7f427'])
    relationships: Optional[Relationships4] = None
    type: Optional[str] = Field(
        None,
        description='The type of resource. This is always `networks`',
        examples=['networks'],
    )


class Avatar(BaseModel):
    data: Optional[ResourceIdentifier] = None


class Relationships5(BaseModel):
    avatar: Optional[Avatar] = Field(
        None,
        description='The avatar or head shot of the person. Details can be retrieved using the `/images` endpoint.\n',
    )


class Person1(BaseModel):
    attributes: Optional[Attributes7] = None
    id: Optional[UUID] = Field(None, examples=['c1fbb1bf-45b1-4803-986e-123166f7f427'])
    relationships: Optional[Relationships5] = None
    type: Optional[str] = Field(
        None,
        description='The type of resource. This is always `people`',
        examples=['people'],
    )


class ClassificationInclusionsGetResponse(BaseModel):
    data: Optional[List[ClassificationInclusion]] = None
    links: Optional[Links] = None


class ClassificationInclusionsIdGetResponse(BaseModel):
    data: Optional[ClassificationInclusion] = None
    links: Optional[ResourceLink] = None


class CreditsGetResponse(BaseModel):
    data: Optional[List[Credit]] = None
    links: Optional[Links] = None


class CreditsIdGetResponse(BaseModel):
    data: Optional[Credit] = None
    links: Optional[ResourceLink] = None


class EpisodesGetResponse(BaseModel):
    data: Optional[List[Episode]] = None
    links: Optional[Links] = None


class EpisodesIdGetResponse(BaseModel):
    data: Optional[Episode] = None
    links: Optional[ResourceLink] = None


class EpisodesIdNextSiblingGetResponse(BaseModel):
    data: Optional[Episode] = None
    links: Optional[ResourceLink] = None


class EpisodesIdPreviousSiblingGetResponse(BaseModel):
    data: Optional[Episode] = None
    links: Optional[ResourceLink] = None


class ImagesGetResponse(BaseModel):
    data: Optional[List[Image]] = None
    links: Optional[Links] = None


class ImagesIdGetResponse(BaseModel):
    data: Optional[Image] = None
    links: Optional[ResourceLink] = None


class NetworksGetResponse(BaseModel):
    data: Optional[List[Network]] = None
    links: Optional[Links] = None


class NetworksIdGetResponse(BaseModel):
    data: Optional[Network] = None
    links: Optional[ResourceLink] = None


class PeopleGetResponse(BaseModel):
    data: Optional[List[Person1]] = None
    links: Optional[Links] = None


class PeopleIdGetResponse(BaseModel):
    data: Optional[Person1] = None
    links: Optional[ResourceLink] = None
